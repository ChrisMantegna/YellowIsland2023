<<<<<<< HEAD
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# we will have to choose zone over section or vice versa so we can clearly see the result. Maybe we adjust the way we manipulate it
# Plot the stacked bar plot with sections on X-axis and species on Y-axis
ggplot(data = section_zone, aes(x = factor(SECTION), y = Sum_Count, fill = Species)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Stacked Bar Plot of Species Counts by Section and Species",
x = "Section", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Creating a new data frame with required columns for the heatmap
heatmap_data <- aggregated_by_zonation_section %>%
select(Species, ZONATION, Sum_Count)
# Creating a new data frame with required columns for the heatmap
heatmap_data <- section_zone %>%
select(Species, ZONATION, Sum_Count)
# Plot the heatmap
ggplot(data = heatmap_data, aes(x = ZONATION, y = Species, fill = Sum_Count)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Heatmap of Species Counts by Zonation and Species",
x = "Zonation", y = "Species", fill = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(heatmap_data)
=======
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='cmantegna',
token='B31FB859EE0EA24F3CA09978F715745D',
secret='i0wHn5QMkJ7dyd1bbA7nCI4zxvqG8CJY90+U3yXW')
renv::activate()
library(quarto)
install.packages(quarto)
install.packages("quarto")
library(knitr, "quarto")
# Installation is commented out, remove hashtag if you need to install
install.packages("kableExtra")
install.packages('gridExtra')
#Use library to call your installed packages for use
library(data.table)
#Use library to call your installed packages for use
library(data.table)
library(dplyr)
#Use library to call your installed packages for use
library(data.table)
#Use library to call your installed packages for use
library(data.table)
#Use library to call your installed packages for use
library(data.table)
#Use library to call your installed packages for use
library(data.table)
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
setwd("/home/shared/8TB_HDD_02/cnmntgna/GitHub/YellowIsland2023/data")
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
setwd("/home/shared/8TB_HDD_02/cnmntgna/GitHub/YellowIsland2023/data")
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
setwd("/home/shared/8TB_HDD_02/cnmntgna/GitHub/YellowIsland2023/data")
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
setwd("/home/shared/8TB_HDD_02/cnmntgna/GitHub/YellowIsland2023/data")
library(tidyverse)
#Use library to call your installed packages for use
library(data.table)
library(dplyr)
library('ggplot2')
library("indicspecies")
library(kableExtra)
library(knitr)
library(RColorBrewer)
library(tidyr)
library(tidyverse)
library(vegan)
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
setwd("/home/shared/8TB_HDD_02/cnmntgna/GitHub/YellowIsland2023/data")
library(readr)
truncated <- read_csv("data/truncated.csv")
View(truncated)
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
setwd("/home/shared/8TB_HDD_02/cnmntgna/GitHub/YellowIsland2023/data")
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
setwd("YellowIsland2023/data")
setwd
getwd
library(readr)
truncated <- read_csv("data/truncated.csv")
View(truncated)
library(readr)
algae <- read_csv("data/algae.csv")
View(algae)
library(readr)
substrate <- read_csv("data/substrate.csv")
View(substrate)
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
setwd()
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
counts<- read.csv("data/truncated.csv", header= TRUE) #species counts per section
#shows the dimensions of your data frame, a quick check to make sure everything imported the way you like
dim(counts)
#shows the dimensions of your data frame, a quick check to make sure everything imported the way you like
dim(counts)
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
counts<- read.csv("data/truncated.csv", header= TRUE) #species counts per section
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
counts<- read.csv("truncated.csv", header= TRUE) #species counts per section
#shows the dimensions of your data frame, a quick check to make sure everything imported the way you like
counts <- truncated
algae <- algae
substrate <- substrate
dim(counts)
#quick view of data frame structure
str(counts)
#look at the summary of your data
summary(counts)
#repeat the process for the second dataframe. Make Note that our data here is characters and will have to change to a number so we can manipulate it.
dim(algae)
str(algae)
summary(algae)
#repeat the process for the second dataframe. Make Note that our data here is characters and will have to change to a number so we can manipulate it.
dim(substrate)
str(substrate)
summary(substrate)
#trying to apply the section1 test code to create a stacked bar for species presence across the sections.
counts1 <- counts %>%
gather(key = "Species", value = "Count", ANNELIDA:OSTEICHTHYES)
# this counts the categories from above so i can plot them
counts2 <- counts1 %>%
group_by(SECTION, ZONATION, Species, Count) %>%
tally()
# plot the species counts
ggplot(counts2, aes(x = Species, y = n, fill = Count)) +
geom_bar(stat = "identity") +
labs(title = "Species Count by Section",
x = "Species",
y = "Count",
fill = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~SECTION, ncol = 2)
# total island richness is 28 unique species present (non-algal)
species_richness <- length(unique(counts2$Species))
print(species_richness)
#this is grouped by zone, not by section
zonation <- counts2 %>%
group_by(ZONATION, Species) %>%
summarize(Sum_Count = sum(Count))
View(zonation)
>>>>>>> ae8c58d9eb30c0feafaae258fa284bc1a3ddcf79
#this is grouped by zone and section
section_zone <- counts2 %>%
group_by(SECTION, ZONATION, Species) %>%
summarize(Sum_Count = sum(Count))
<<<<<<< HEAD
# Creating a new data frame with required columns for the heatmap
heatmap_data <- section_zone %>%
select(Species, ZONATION, Sum_Count)
# Plot the heatmap
ggplot(data = heatmap_data, aes(x = ZONATION, y = Species, fill = Sum_Count)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Heatmap of Species Counts by Zonation and Species",
x = "Zonation", y = "Species", fill = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ZONATION to a factor with ordered levels
section_zone$ZONATION <- factor(section_zone$ZONATION, levels = c("M", "U"))
# Create a new data frame with required columns for the heatmap
heatmap_data <- section_zone %>%
select(Species, ZONATION, Sum_Count)
# Plot the heatmap
ggplot(data = heatmap_data, aes(x = ZONATION, y = Species, fill = Sum_Count)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Heatmap of Species Counts by Zonation and Species",
x = "Zonation", y = "Species", fill = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ZONATION to a factor with ordered levels
section_zone$ZONATION <- factor(section_zone$ZONATION, levels = c("M", "U", "L"))
=======
View(section_zone)
# Convert ZONATION to a factor with ordered levels
section_zone$ZONATION <- factor(section_zone$ZONATION, levels = c("L", "M", "U"))
>>>>>>> ae8c58d9eb30c0feafaae258fa284bc1a3ddcf79
# Create a new data frame with required columns for the heatmap
heatmap_data <- section_zone %>%
select(Species, ZONATION, Sum_Count)
# Plot the heatmap
ggplot(data = heatmap_data, aes(x = ZONATION, y = Species, fill = Sum_Count)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Heatmap of Species Counts by Zonation and Species",
x = "Zonation", y = "Species", fill = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ZONATION to a factor with ordered levels
section_zone$ZONATION <- factor(section_zone$ZONATION, levels = c("L", "M", "U"))
# Create a new data frame with required columns for the heatmap
heatmap_data <- section_zone %>%
select(Species, ZONATION, Sum_Count)
# Plot the heatmap
ggplot(data = heatmap_data, aes(x = ZONATION, y = Species, fill = Sum_Count)) +
geom_tile() +
<<<<<<< HEAD
scale_fill_gradient(low = "white", high = "blue") +
=======
scale_fill_gradient(low = "white", high = "red") +
>>>>>>> ae8c58d9eb30c0feafaae258fa284bc1a3ddcf79
labs(title = "Heatmap of Species Counts by Zonation and Species",
x = "Zonation", y = "Species", fill = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ZONATION to a factor with ordered levels
section_zone$ZONATION <- factor(section_zone$ZONATION, levels = c("L", "M", "U"))
<<<<<<< HEAD
heatmap_data <- section_zone %>%
select(Species, ZONATION, Sum_Count)
View(heatmap_data)
# Convert ZONATION to a factor with ordered levels
section_zone$ZONATION <- factor(section_zone$ZONATION, levels = c("L", "M", "U"))
=======
>>>>>>> ae8c58d9eb30c0feafaae258fa284bc1a3ddcf79
# Create a new data frame with required columns for the heatmap
heatmap_data <- section_zone %>%
select(Species, ZONATION, Sum_Count)
# Plot the heatmap
ggplot(data = heatmap_data, aes(x = ZONATION, y = Species, fill = Sum_Count)) +
geom_tile() +
<<<<<<< HEAD
scale_fill_gradient(low = "white", high = "blue") +
=======
scale_fill_gradient(low = "grey", high = "red") +
>>>>>>> ae8c58d9eb30c0feafaae258fa284bc1a3ddcf79
labs(title = "Heatmap of Species Counts by Zonation and Species",
x = "Zonation", y = "Species", fill = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
<<<<<<< HEAD
View(algae)
# You can create a new data frame with the relevant columns for visualization
plot_data <- algae %>%
mutate(FirstLayer_Total = BROWN_FL + RED_FL + GREEN_FL + ENCRUSTING_FL + OTHER_FL,
SecondLayer_Total = BROWN_SL + RED_SL + GREEN_SL + ENCRUSTING_SL + OTHER_SL) %>%
select(SECTION, ZONATION, Floating_Total, Substrate_Total)
# You can create a new data frame with the relevant columns for visualization
plot_data <- algae %>%
mutate(FirstLayer_Total = BROWN_FL + RED_FL + GREEN_FL + ENCRUSTING_FL + OTHER_FL,
SecondLayer_Total = BROWN_SL + RED_SL + GREEN_SL + ENCRUSTING_SL + OTHER_SL) %>%
select(SECTION, ZONATION, FirstLayer_Total, SecondLayer_Total)
# Plot the stacked bar plot
ggplot(data = plot_data, aes(x = factor(SECTION), y = Firstlayer_Total, fill = ZONATION)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Counts (_FL vs. _SL) by Section and Zone",
x = "Section", y = "Total Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_bar(data = plot_data, aes(x = factor(SECTION), y = -SecondLayer_Total, fill = ZONATION),
stat = "identity", position = "stack")
# You can create a new data frame with the relevant columns for visualization
plot_data <- algae %>%
mutate(FirstLayer_Total = BROWN_FL + RED_FL + GREEN_FL + ENCRUSTING_FL + OTHER_FL,
SecondLayer_Total = BROWN_SL + RED_SL + GREEN_SL + ENCRUSTING_SL + OTHER_SL) %>%
select(SECTION, ZONATION, FirstLayer_Total, SecondLayer_Total)
# Plot the stacked bar plot
ggplot(data = plot_data, aes(x = factor(SECTION), y = FirstLayer_Total, fill = ZONATION)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Counts (_FL vs. _SL) by Section and Zone",
x = "Section", y = "Total Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_bar(data = plot_data, aes(x = factor(SECTION), y = -SecondLayer_Total, fill = ZONATION),
stat = "identity", position = "stack")
# Create a new data frame with the relevant columns for visualization
plot_data <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with("BROWN_"), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type),
ZONATION = factor(ZONATION, levels = c("L", "M", "U")))
# Plot the stacked bar plot
ggplot(data = plot_data, aes(x = factor(SECTION), y = Count, fill = ZONATION)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Counts by Section, Algal Type, and Zone",
x = "Section", y = "Count", fill = "Zone") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(plot_data)
# Create a new data frame with the relevant columns for visualization
plot_data_by_section <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with("BROWN_"), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type))
plot_data_by_zone <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with("BROWN_"), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type),
ZONATION = factor(ZONATION, levels = c("L", "M", "U")))
# Create two separate plots
# 1. Algal type by section
plot_section <- ggplot(data = plot_data_by_section, aes(x = factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Section",
x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Algal type by zone
plot_zone <- ggplot(data = plot_data_by_zone, aes(x = Algal_Type, y = Count, fill = ZONATION)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Zone",
x = "Algal Type", y = "Count", fill = "Zone") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Arrange the plots side by side using 'gridExtra' package
library(gridExtra)
# Arrange the plots side by side using 'gridExtra' package
install.packages(gridExtra)
# Arrange the plots side by side using 'gridExtra' package
install.packages('gridExtra')
# Create a new data frame with the relevant columns for visualization
plot_data_by_section <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with("BROWN_"), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type))
plot_data_by_zone <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with("BROWN_"), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type),
ZONATION = factor(ZONATION, levels = c("L", "M", "U")))
# Create two separate plots
# 1. Algal type by section
plot_section <- ggplot(data = plot_data_by_section, aes(x = factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Section",
x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Algal type by zone
plot_zone <- ggplot(data = plot_data_by_zone, aes(x = Algal_Type, y = Count, fill = ZONATION)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Zone",
x = "Algal Type", y = "Count", fill = "Zone") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Arrange the plots side by side using 'gridExtra' package
library(gridExtra)
# Arrange the two plots side by side
grid.arrange(plot_section, plot_zone, ncol = 2)
# Create a new data frame with the relevant columns for visualization
plot_data_by_section <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with("BROWN_"), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type))
plot_data_by_zone <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with("BROWN_"), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type),
ZONATION = factor(ZONATION, levels = c("L", "M", "U")))
# Create two separate plots for each algal type
# 1. Algal type by section
plot_section <- ggplot(data = plot_data_by_section, aes(x = factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Section",
x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Algal type by zone
plot_zone <- ggplot(data = plot_data_by_zone, aes(x = Algal_Type, y = Count, fill = ZONATION)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Zone",
x = "Algal Type", y = "Count", fill = "Zone") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Arrange the plots side by side using 'gridExtra' package
library(gridExtra)
# Arrange the two plots side by side
grid.arrange(plot_section, plot_zone, ncol = 2)
# Create a new data frame with the relevant columns for visualization
plot_data_by_section <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with(c("BROWN_", "RED_", "GREEN_", "ENCRUSTING_", "OTHER_")), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type))
plot_data_by_zone <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with(c("BROWN_", "RED_", "GREEN_", "ENCRUSTING_", "OTHER_")), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type),
ZONATION = factor(ZONATION, levels = c("L", "M", "U")))
# Create two separate plots for each algal type
# 1. Algal type by section
plot_section <- ggplot(data = plot_data_by_section, aes(x = factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Section",
x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Algal type by zone
plot_zone <- ggplot(data = plot_data_by_zone, aes(x = Algal_Type, y = Count, fill = ZONATION)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Zone",
x = "Algal Type", y = "Count", fill = "Zone") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Arrange the plots side by side using 'gridExtra' package
library(gridExtra)
# Arrange the two plots side by side
grid.arrange(plot_section, plot_zone, ncol = 2)
View(counts2)
View(counts)
# Convert the species count data to a distance matrix
distance_matrix <- vegdist(counts[, 3:13], method = "bray")
# Perform NMDS
nmds_result <- metaMDS(distance_matrix, k = 2)  # k = 2 for 2-dimensional NMDS, you can change it as needed
=======
# we will have to choose zone over section or vice versa so we can clearly see the result. Maybe we adjust the way we manipulate it
# Plot the stacked bar plot with sections on X-axis and species on Y-axis
ggplot(data = section_zone, aes(x = factor(SECTION), y = Sum_Count, fill = Species)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Stacked Bar Plot of Species Counts by Section and Species",
x = "Section", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
>>>>>>> ae8c58d9eb30c0feafaae258fa284bc1a3ddcf79
# Check for missing values in the entire data frame
sum(is.na(counts))
# Check for missing values in specific columns (e.g., the algal count columns)
colSums(is.na(counts[, 3:13]))
# Convert the species count data to a distance matrix
distance_matrix <- vegdist(counts[, 3:13], method = "bray")
# Impute missing values with the mean of non-missing values
distance_matrix[is.na(distance_matrix)] <- mean(distance_matrix, na.rm = TRUE)
# Perform NMDS
nmds_result <- metaMDS(distance_matrix, k = 2)  # k = 2 for 2-dimensional NMDS, you can change it as needed
# Plot NMDS
plot(nmds_result, display = "sites", type = "n")  # Plot without points first
points(nmds_result, display = "sites", pch = 16, col = counts$SECTION)  # Add points with different colors for sections
legend("bottomright", legend = unique(counts$SECTION), col = unique(counts$SECTION), pch = 16, title = "Section")
<<<<<<< HEAD
plot(nmds_result, display = "sites", type = "n")  # Plot without points first
points(nmds_result, display = "sites", pch = 16, col = counts$SECTION)  # Add points with different colors for sections
legend("bottomright", legend = unique(counts$SECTION), col = unique(counts$SECTION), pch = 16, title = "Section")
# Convert the species count data to a distance matrix
distance_matrix <- vegdist(counts[, 3:13], method = "bray")
# Perform PERMANOVA
permanova_result <- adonis(distance_matrix ~ SECTION, data = counts)
=======
>>>>>>> ae8c58d9eb30c0feafaae258fa284bc1a3ddcf79
# Convert the species count data to a distance matrix
distance_matrix <- vegdist(counts[, 3:13], method = "bray")
# Impute missing values with the mean of non-missing values
distance_matrix[is.na(distance_matrix)] <- mean(distance_matrix, na.rm = TRUE)
# Perform PERMANOVA
permanova_result <- adonis(distance_matrix ~ SECTION, data = counts)
# Print PERMANOVA results
print(permanova_result)
<<<<<<< HEAD
# Sum the counts for each species to get the total count per section and zone
section_totals <- algae %>%
group_by(SECTION) %>%
summarise(total_count = sum(BROWN_FL, RED_FL, GREEN_FL, ENCRUSTING_FL, OTHER_FL,
BROWN_SL, RED_SL, GREEN_SL, ENCRUSTING_SL, OTHER_SL))
zone_totals <- algae %>%
group_by(ZONATION) %>%
summarise(total_count = sum(BROWN_FL, RED_FL, GREEN_FL, ENCRUSTING_FL, OTHER_FL,
BROWN_SL, RED_SL, GREEN_SL, ENCRUSTING_SL, OTHER_SL))
# Create a Poisson GLM for section comparison
section_glm <- glm(total_count ~ SECTION, data = section_totals, family = poisson)
# Create a Poisson GLM for zone comparison
zone_glm <- glm(total_count ~ ZONATION, data = zone_totals, family = poisson)
# Perform ANOVA on the Poisson GLM
section_anova <- anova(section_glm)
zone_anova <- anova(zone_glm)
# Print the ANOVA results
print(section_anova)
print(zone_anova)
=======
>>>>>>> ae8c58d9eb30c0feafaae258fa284bc1a3ddcf79
library(stats)
# Combine the columns related to species counts into a single column
species_data <- counts %>%
select(SECTION, ZONATION, starts_with("ANNELIDA"), starts_with("BRYOZOA"), starts_with("TUNICATA"),
starts_with("PORIFERA_DEMOSPONGIAE"), starts_with("CNIDAIRA_ANTHOZOA"),
starts_with("MOLLUSCA"), starts_with("ARTHROPODA_NC"), starts_with("ARTHROPODA_C"),
starts_with("ECHINODERMATA_A"), starts_with("ECHINODERMATA_O"), starts_with("OSTEICHTHYES"))
# Gather the species count data into a long format
species_data_long <- species_data %>%
pivot_longer(cols = starts_with("ANNELIDA"):starts_with("OSTEICHTHYES"),
names_to = "Species", values_to = "Count")
# Calculate the total count of each species for each section and zone
total_counts <- species_data_long %>%
group_by(SECTION, ZONATION, Species) %>%
summarise(Total_Count = sum(Count))
# Create a Poisson GLM for section comparison
section_glm <- glm(Total_Count ~ SECTION, data = total_counts, family = poisson)
# Create a Poisson GLM for zone comparison
zone_glm <- glm(Total_Count ~ ZONATION, data = total_counts, family = poisson)
# Perform ANOVA on the Poisson GLMs
section_anova <- anova(section_glm)
zone_anova <- anova(zone_glm)
# Print the ANOVA results
print(section_anova)
print(zone_anova)
# Perform the ANOVA for section comparison
section_anova <- aov(Total_Count ~ SECTION, data = total_counts)
# Print the ANOVA table with p-values
summary(section_anova)
# Perform the ANOVA for zone comparison
zone_anova <- aov(Total_Count ~ ZONATION, data = total_counts)
# Print the ANOVA table with p-values
summary(zone_anova)
<<<<<<< HEAD
=======
# Sum the counts for each species to get the total count per section and zone
section_totals <- algae %>%
group_by(SECTION) %>%
summarise(total_count = sum(BROWN_FL, RED_FL, GREEN_FL, ENCRUSTING_FL, OTHER_FL,
BROWN_SL, RED_SL, GREEN_SL, ENCRUSTING_SL, OTHER_SL))
zone_totals <- algae %>%
group_by(ZONATION) %>%
summarise(total_count = sum(BROWN_FL, RED_FL, GREEN_FL, ENCRUSTING_FL, OTHER_FL,
BROWN_SL, RED_SL, GREEN_SL, ENCRUSTING_SL, OTHER_SL))
# Create a Poisson GLM for section comparison
section_glm <- glm(total_count ~ SECTION, data = section_totals, family = poisson)
# Create a Poisson GLM for zone comparison
zone_glm <- glm(total_count ~ ZONATION, data = zone_totals, family = poisson)
# Perform ANOVA on the Poisson GLM
section_anova <- anova(section_glm)
zone_anova <- anova(zone_glm)
# Print the ANOVA results
print(section_anova)
print(zone_anova)
>>>>>>> ae8c58d9eb30c0feafaae258fa284bc1a3ddcf79
# Combine the columns related to algae counts into a single column
algae_data <- algae %>%
select(SECTION, ZONATION, starts_with("BROWN_FL"), starts_with("RED_FL"), starts_with("GREEN_FL"),
starts_with("ENCRUSTING_FL"), starts_with("OTHER_FL"),
starts_with("BROWN_SL"), starts_with("RED_SL"), starts_with("GREEN_SL"),
starts_with("ENCRUSTING_SL"), starts_with("OTHER_SL"))
# Gather the algae count data into a long format
algae_data_long <- algae_data %>%
pivot_longer(cols = starts_with("BROWN_FL"):starts_with("OTHER_SL"),
names_to = "Algal_Type", values_to = "Count")
# Calculate the total count of each algal type for each section and zone
total_counts_algae <- algae_data_long %>%
group_by(SECTION, ZONATION, Algal_Type) %>%
summarise(Total_Count = sum(Count))
# Perform the ANOVA for section comparison
section_anova_algae <- aov(Total_Count ~ SECTION, data = total_counts_algae)
# Print the ANOVA table with p-values
summary(section_anova_algae)
# Perform the ANOVA for zone comparison
zone_anova_algae <- aov(Total_Count ~ ZONATION, data = total_counts_algae)
# Print the ANOVA table with p-values
summary(zone_anova_algae)
<<<<<<< HEAD
knitr::opts_chunk$set(echo = TRUE)
# Load required packages
#install.packages("ggplot2")
library(ggplot2)
# Read the data from the CSV file
data <- read.csv("seal.csv")
# Convert the DATE OF OBSERVATION column to Date format
data$DATE_OF_OBSERVATION <- as.Date(data$DATE_OF_OBSERVATION, format = "%m/%d/%Y")
# Load required packages
#install.packages("ggplot2")
library(ggplot2)
# Read the data from the CSV file
data <- read.csv("seal.csv")
# Convert the DATE OF OBSERVATION column to Date format
data$DATE_OF_OBSERVATION <- as.Date(data$DATE_OF_OBSERVATION, format = "%m/%d/%Y")
View(data)
# Read the data from the CSV file
data <- read.csv("seal.csv")
# Convert the DATE OF OBSERVATION column to Date format
data$DATE.OF.OBSERVATION <- as.Date(data$DATE.OF.OBSERVATION, format = "%m/%d/%Y")
# Calculate the total behavior frequency per day
total_behavior_frequency <- aggregate(OCCURENCE ~ DATE.OF.OBSERVATION, data, sum)
# Plot the histogram of behaviors per day
ggplot(data, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE, fill = BEHAVIOUR)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(x = "Date of Observation", y = "Behavior Frequency", title = "Histogram of Behaviors Per Day")
# Plot the histogram of total behavior frequency across all days
ggplot(total_behavior_frequency, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE)) +
geom_bar(stat = "identity", fill = "blue") +
theme_minimal() +
labs(x = "Date of Observation", y = "Total Behavior Frequency", title = "Histogram of Total Behavior Frequency")
# Convert the DATE OF OBSERVATION column to Date format
data$DATE.OF.OBSERVATION <- as.Date(data$DATE.OF.OBSERVATION, format = "%m/%d/%Y")
# Calculate the total behavior frequency per day
total_behavior_frequency <- aggregate(OCCURENCE ~ DATE.OF.OBSERVATION, data, sum)
# Plot the histogram of behaviors per day
ggplot(data, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE, fill = BEHAVIOUR)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(x = "Date of Observation", y = "Behavior Frequency", title = "Histogram of Behaviors Per Day")
# Plot the histogram of total behavior frequency across all days
ggplot(total_behavior_frequency, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE)) +
geom_bar(stat = "identity", fill = "blue") +
theme_minimal() +
labs(x = "Date of Observation", y = "Total Behavior Frequency", title = "Histogram of Total Behavior Frequency")
ggplot(total_behavior_frequency, aes(x = DATE_OF_OBSERVATION, y = OCCURENCE, fill = BEHAVIOUR)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(x = "Date of Observation", y = "Total Behavior Frequency", title = "Stacked Bar Plot of Total Behavior Frequency")
# Calculate the total behavior frequency per day
total_behavior_frequency <- aggregate(OCCURENCE ~ DATE.OF.OBSERVATION, data, sum)
# Plot the stacked bar plot of total behavior frequency across all days
ggplot(total_behavior_frequency, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE, fill = BEHAVIOUR)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(x = "Date of Observation", y = "Total Behavior Frequency", title = "Stacked Bar Plot of Total Behavior Frequency")
# Convert the DATE OF OBSERVATION column to Date format
data$DATE.OF.OBSERVATION <- as.Date(data$DATE.OF.OBSERVATION, format = "%m/%d/%Y")
# Calculate the total behavior frequency per day
total_behavior_frequency <- aggregate(OCCURENCE ~ DATE.OF.OBSERVATION, data, sum)
# Plot the stacked bar plot of total behavior frequency across all days
ggplot(total_behavior_frequency, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE, fill = BEHAVIOUR)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(x = "Date of Observation", y = "Total Behavior Frequency", title = "Stacked Bar Plot of Total Behavior Frequency")
View(total_behavior_frequency)
# Convert the DATE OF OBSERVATION column to Date format
data$DATE.OF.OBSERVATION <- as.Date(data$DATE.OF.OBSERVATION, format = "%m/%d/%Y")
# Calculate the total behavior frequency per day
total_behavior_frequency <- aggregate(OCCURENCE ~ DATE.OF.OBSERVATION, data, sum)
# Plot the stacked bar plot of total behavior frequency across all days
ggplot(total_behavior_frequency, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE, fill = BEHAVIOUR)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(x = "Date of Observation", y = "Total Behavior Frequency", title = "Stacked Bar Plot of Total Behavior Frequency")
View(total_behavior_frequency)
# Convert the DATE OF OBSERVATION column to Date format
data$DATE.OF.OBSERVATION <- as.Date(data$DATE.OF.OBSERVATION, format = "%m/%d/%Y")
# Convert the DATE OF OBSERVATION column to Date format
data$DATE.OF.OBSERVATION <- as.Date(data$DATE.OF.OBSERVATION, format = "%m/%d/%Y")
# Plot the grouped bar plot for daily comparison of behaviors observed
ggplot(data, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE, fill = BEHAVIOUR)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(x = "Date of Observation", y = "Behavior Frequency", title = "Daily Comparison of Behaviors Observed")
# Convert the DATE OF OBSERVATION column to Date format
data$DATE.OF.OBSERVATION <- as.Date(data$DATE.OF.OBSERVATION, format = "%m/%d/%Y")
# Plot the stacked bar plot for daily frequency of each behavior
ggplot(data, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE, fill = BEHAVIOUR)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(x = "Date of Observation", y = "Behavior Frequency", title = "Daily Frequency of Each Behavior") +
scale_fill_discrete(name = "Behavior")
# Create a data frame with behavior, life stage, and play columns
data <- data.frame(
Behavior = c("CHASE", "TORPEDO", "PLAY_BITE", "REST_BA", "REST_H_O", "CHASE", "REST_BA", "TORPEDO", "REST_H_O", "REST_BO", "REST_BA", "REST_BA", "REST_H_O", "REST_H_O", "REST_H_O", "REST_H_O", "PLAY_BITE", "NUZZLE", "REST_H_O", "REST_BA", "TORPEDO", "REST_BA", "REST_BO", "REST_BO", "TORPEDO", "REST_BA"),
Life_Stage = c("Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "M", "Y", "A", "A", "A", "A", "A", "M", "Y", "Y", "P", "A", "P", "Y", "A", "P", "P", "Y", "A"),
Play = c("Y", "Y", "Y", "N", "N", "Y", "N", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "Y", "Y", "N", "N", "Y", "N", "N", "N", "N", "Y", "N")
)
data<- read.csv(play.csv)
data<- read.csv("play.csv")
# Create a new column to represent play behavior as a factor
data$Play <- factor(data$Play, levels = c("Y", "N"), labels = c("Play", "Non-Play"))
# Plot the stacked bar plot for play versus non-play behavior
ggplot(data, aes(x = Life_Stage, fill = Play)) +
geom_bar(position = "fill") +
theme_minimal() +
labs(x = "Life Stage", y = "Proportion", title = "Play Behavior vs. Non-Play Behavior") +
scale_fill_discrete(name = "Behavior")
data<- read.csv("play.csv")
# Create a new column to represent play behavior as a factor
data$Play <- factor(data$Play, levels = c("Y", "N"), labels = c("Play", "Non-Play"))
# Plot the stacked bar plot for play versus non-play behavior
ggplot(data, aes(x = Life_Stage, fill = Play)) +
geom_bar(position = "fill") +
theme_minimal() +
labs(x = "Life Stage", y = "Proportion", title = "Play Behavior vs. Non-Play Behavior") +
scale_fill_discrete(name = "Behavior")
View(data)
data<- read.csv("play.csv")
# Create a new column to represent play behavior as a factor
data$Play <- factor(data$Play, levels = c("Y", "N"), labels = c("Play", "Non-Play"))
# Plot the stacked bar plot for play versus non-play behavior
ggplot(data, aes(x = Life_Stage, fill = Play)) +
geom_bar(position = "fill") +
theme_minimal() +
labs(x = "Life Stage", y = "Proportion", title = "Play Behavior vs. Non-Play Behavior") +
scale_fill_discrete(name = "Behavior")
post<- read.csv("post.csv")
post<- read.csv("post.csv")
manchester<- read.csv("manchester.csv")
post<- read.csv("post.csv")
manchester<- read.csv("manchester.csv")
#shows the dimensions of your data frame, a quick check to make sure everything imported the way you like
dim(post)
#quick view of data frame structure
str(post)
#look at the summary of your data
summary(post)
#shows the dimensions of your data frame, a quick check to make sure everything imported the way you like
dim(manchester)
#quick view of data frame structure
str(manchester)
#look at the summary of your data
summary(manchester)
View(manchester)
View(post)
View(manchester)
=======
# this visualization is unhelpful - trying to break it down below
# Create a new data frame with the right categories for viz
plot_data <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with("BROWN_"), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type),
ZONATION = factor(ZONATION, levels = c("L", "M", "U")))
# Plot the stacked bar plot
ggplot(data = plot_data, aes(x = factor(SECTION), y = Count, fill = ZONATION)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Counts by Section, Algal Type, and Zone",
x = "Section", y = "Count", fill = "Zone") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a new data frame with the relevant columns for visualization
plot_data_by_section <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with(c("BROWN_", "RED_", "GREEN_", "ENCRUSTING_", "OTHER_")), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type))
plot_data_by_zone <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with(c("BROWN_", "RED_", "GREEN_", "ENCRUSTING_", "OTHER_")), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type),
ZONATION = factor(ZONATION, levels = c("L", "M", "U")))
# Create two separate plots for each algal type
# 1. Algal type by section
plot_section <- ggplot(data = plot_data_by_section, aes(x = factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Section",
x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Algal type by zone
plot_zone <- ggplot(data = plot_data_by_zone, aes(x = Algal_Type, y = Count, fill = ZONATION)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Zone",
x = "Algal Type", y = "Count", fill = "Zone") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Arrange the plots side by side using 'gridExtra' package
library(gridExtra)
# Arrange the two plots side by side
grid.arrange(plot_section, plot_zone, ncol = 2)
# This is a plot that shows 3 dimensions of data in 2 dimensions
# Create a species abundance matrix
species_matrix <- t(table(counts1$species, counts1$SECTION))
# Create a new data frame with the relevant columns for visualization
plot_data_by_section <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with(c("BROWN_", "RED_", "GREEN_", "ENCRUSTING_", "OTHER_")), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type))
plot_data_by_zone <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with(c("BROWN_", "RED_", "GREEN_", "ENCRUSTING_", "OTHER_")), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type),
ZONATION = factor(ZONATION, levels = c("L", "M", "U")))
# Create two separate plots for each algal type
# 1. Algal type by section
plot_section <- ggplot(data = plot_data_by_section, aes(x = factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Section",
x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Algal type by zone
plot_zone <- ggplot(data = plot_data_by_zone, aes(x = Algal_Type, y = Count, fill = ZONATION)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Zone",
x = "Algal Type", y = "Count", fill = "Zone") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Arrange the plots side by side using 'gridExtra' package
library(gridExtra)
# Arrange the two plots side by side
grid.arrange(plot_section, plot_zone, ncol = 2)
# we will have to choose zone over section or vice versa so we can clearly see the result. Maybe we adjust the way we manipulate it
# Plot the stacked bar plot with sections on X-axis and species on Y-axis
ggplot(data = section_zone, aes(x = factor(SECTION), y = Sum_Count, fill = Species)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Stacked Bar Plot of Species Counts by Section and Species",
x = "Section", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Installation is commented out, remove hashtag if you need to install
install.packages("kableExtra")
install.packages('gridExtra')
#Use library to call your installed packages for use
library(data.table)
library(dplyr)
library('ggplot2')
library("indicspecies")
library(kableExtra)
library(knitr)
library(RColorBrewer)
library(tidyr)
library(tidyverse)
library(vegan)
getwd()
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
counts<- read.csv("truncated.csv", header= TRUE) #species counts per section
# Installation is commented out, remove hashtag if you need to install
install.packages("kableExtra")
install.packages('gridExtra')
#Use library to call your installed packages for use
library(data.table)
library(dplyr)
library('ggplot2')
library("indicspecies")
library(kableExtra)
library(knitr)
library(RColorBrewer)
library(tidyr)
library(tidyverse)
library(vegan)
getwd()
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
counts<- read.csv("truncated.csv", header= TRUE) #species counts per section
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
counts<- read.csv("truncated.csv", header= TRUE) #species counts per section
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
counts<- read.csv("truncated.csv", header= TRUE) #species counts per section
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
counts<- read.csv("truncated.csv", header= TRUE) #species counts per section
library(readr)
truncated <- read_csv("data/truncated.csv")
View(truncated)
library(readr)
algae <- read_csv("data/algae.csv")
View(algae)
library(readr)
substrate <- read_csv("data/substrate.csv")
View(substrate)
#You can also hover over the file on your 'files pane' and right click to import data
#change this path/ place to you and your file path
counts<- read.csv("truncated.csv", header= TRUE) #species counts per section
# we will have to choose zone over section or vice versa so we can clearly see the result. Maybe we adjust the way we manipulate it
# Plot the stacked bar plot with sections on X-axis and species on Y-axis
ggplot(data = section_zone, aes(x = factor(SECTION), y = Sum_Count, fill = Species)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Stacked Bar Plot of Species Counts by Section and Species",
x = "Section", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
>>>>>>> ae8c58d9eb30c0feafaae258fa284bc1a3ddcf79
