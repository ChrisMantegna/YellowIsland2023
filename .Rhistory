<<<<<<< HEAD
labels = c("BROWN" = "Brown", "RED" = "Red", "GREEN" = "Green", "ENCRUSTING" = "Encrusting", "OTHER" = "Other")) +
labs(x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(reverse = TRUE))  # To customize the order of names in the legend
# Save the plot as an image (optional)
ggsave("stacked_bar_plot.png", width = 10, height = 6)
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(Section, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(SECTION, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
# Plot the stacked bar chart
ggplot(algae_counts, aes(x = as.factor(Section), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("BROWN" = "brown", "RED" = "red", "GREEN" = "green", "ENCRUSTING" = "deeppink", "OTHER" = "gray"),
labels = c("BROWN" = "Brown", "RED" = "Red", "GREEN" = "Green", "ENCRUSTING" = "Encrusting", "OTHER" = "Other")) +
labs(x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(reverse = TRUE))  # To customize the order of names in the legend
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(SECTION, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
# Plot the stacked bar chart
ggplot(algae_counts, aes(x = as.factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("BROWN" = "brown", "RED" = "red", "GREEN" = "green", "ENCRUSTING" = "deeppink", "OTHER" = "gray"),
labels = c("BROWN" = "Brown", "RED" = "Red", "GREEN" = "Green", "ENCRUSTING" = "Encrusting", "OTHER" = "Other")) +
labs(x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(reverse = TRUE))  # To customize the order of names in the legend
# Save the plot as an image (optional)
ggsave("stacked_bar_plot.png", width = 10, height = 6)
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(SECTION, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
# Plot the stacked bar chart
ggplot(algae_counts, aes(x = as.factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("BROWN" = "sienna4", "RED" = "red", "GREEN" = "seagreen4", "ENCRUSTING" = "deeppink", "OTHER" = "gray"),
labels = c("BROWN" = "Brown", "RED" = "Red", "GREEN" = "Green", "ENCRUSTING" = "Encrusting", "OTHER" = "Other")) +
labs(x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(legend.position = "right") +
guides(fill = guide_legend(reverse = TRUE))  # To customize the order of names in the legend
# Save the plot as an image (optional)
ggsave("stacked_bar_plot.png", width = 10, height = 6)
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(SECTION, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
# Define the custom order for the legend
custom_order <- c("BROWN", "GREEN", "RED", "ENCRUSTING", "OTHER")
algae_counts$Algal_Type <- factor(algae_counts$Algal_Type, levels = custom_order)
# Plot the stacked bar chart
ggplot(algae_counts, aes(x = as.factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("BROWN" = "brown", "RED" = "red", "GREEN" = "green", "ENCRUSTING" = "deeppink", "OTHER" = "gray"),
labels = c("BROWN" = "Brown", "RED" = "Red", "GREEN" = "Green", "ENCRUSTING" = "Encrusting", "OTHER" = "Other")) +
labs(x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(legend.position = "right") +
guides(fill = guide_legend(reverse = TRUE))  # To customize the order of names in the legend
# Save the plot as an image (optional)
ggsave("stacked_bar_plot.png", width = 10, height = 6)
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(SECTION, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
# Define the custom order for the legend
custom_order <- c("OTHER", "ENCRUSTING","RED", "GREEN", "BROWN")
algae_counts$Algal_Type <- factor(algae_counts$Algal_Type, levels = custom_order)
# Plot the stacked bar chart
ggplot(algae_counts, aes(x = as.factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("BROWN" = "brown", "RED" = "red", "GREEN" = "seagreen4", "ENCRUSTING" = "deeppink", "OTHER" = "gray"),
labels = c("BROWN" = "Brown", "RED" = "Red", "GREEN" = "Green", "ENCRUSTING" = "Encrusting", "OTHER" = "Other")) +
labs(x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(legend.position = "right") +
guides(fill = guide_legend(reverse = TRUE))  # To customize the order of names in the legend
# Save the plot as an image (optional)
ggsave("stacked_bar_plot.png", width = 10, height = 6)
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(SECTION, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
# Define the custom order for the legend
custom_order <- c("OTHER", "ENCRUSTING","RED", "GREEN", "BROWN")
algae_counts$Algal_Type <- factor(algae_counts$Algal_Type, levels = custom_order)
# Plot the stacked bar chart
ggplot(algae_counts, aes(x = as.factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("BROWN" = "brown", "RED" = "red", "GREEN" = "seagreen4", "ENCRUSTING" = "deeppink", "OTHER" = "gray"),
labels = c("BROWN" = "Brown", "RED" = "Red", "GREEN" = "Green", "ENCRUSTING" = "Encrusting", "OTHER" = "Other")) +
labs(x = "Section", y = "Count", fill = "Algal Type", title = "Algal Cover by Section") +
theme_minimal() +
theme(legend.position = "right") +
guides(fill = guide_legend(reverse = TRUE))  # To customize the order of names in the legend
# Save the plot as an image (optional)
ggsave("stacked_bar_plot.png", width = 10, height = 6)
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(SECTION, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
# Define the custom order for the legend
custom_order <- c("OTHER", "ENCRUSTING","RED", "GREEN", "BROWN")
algae_counts$Algal_Type <- factor(algae_counts$Algal_Type, levels = custom_order)
# Plot the stacked bar chart
ggplot(algae_counts, aes(x = as.factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("BROWN" = "brown", "RED" = "red", "GREEN" = "seagreen4", "ENCRUSTING" = "deeppink", "OTHER" = "gray"),
labels = c("BROWN" = "Brown", "RED" = "Red", "GREEN" = "Green", "ENCRUSTING" = "Encrusting", "OTHER" = "Other")) +
labs(x = "Section", y = "Count", fill = "Algal Type", title = "Algal Cover by Section") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust= 0.5)) +
guides(fill = guide_legend(reverse = FALSE))  # To customize the order of names in the legend
# Save the plot as an image (optional)
ggsave("stacked_bar_plot.png", width = 10, height = 6)
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(SECTION, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
# Define the custom order for the legend
custom_order <- c("OTHER", "ENCRUSTING","RED", "GREEN", "BROWN")
algae_counts$Algal_Type <- factor(algae_counts$Algal_Type, levels = custom_order)
# Plot the stacked bar chart
ggplot(algae_counts, aes(x = as.factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("BROWN" = "brown", "RED" = "red", "GREEN" = "seagreen4", "ENCRUSTING" = "deeppink", "OTHER" = "gray"),
labels = c("BROWN" = "Brown", "RED" = "Red", "GREEN" = "Green", "ENCRUSTING" = "Encrusting", "OTHER" = "Other")) +
labs(x = "Section", y = "Count", fill = "Algal Type", title = "Algal Cover by Section") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust= 0.5)) +
guides(fill = guide_legend(reverse = TRUE))  # To customize the order of names in the legend
# Save the plot as an image (optional)
ggsave("stacked_bar_plot.png", width = 10, height = 6)
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(SECTION, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
# Define the custom order for the legend
custom_order <- c("OTHER", "ENCRUSTING","RED", "GREEN", "BROWN")
algae_counts$Algal_Type <- factor(algae_counts$Algal_Type, levels = custom_order)
# Plot the stacked bar chart
ggplot(algae_counts, aes(x = as.factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("BROWN" = "brown", "RED" = "red", "GREEN" = "seagreen4", "ENCRUSTING" = "purple4", "OTHER" = "gray"),
labels = c("BROWN" = "Brown", "RED" = "Red", "GREEN" = "Green", "ENCRUSTING" = "Encrusting", "OTHER" = "Other")) +
labs(x = "Section", y = "Count", fill = "Algal Type", title = "Algal Cover by Section") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust= 0.5)) +
guides(fill = guide_legend(reverse = TRUE))  # To customize the order of names in the legend
# Save the plot as an image (optional)
ggsave("stacked_bar_plot.png", width = 10, height = 6)
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(SECTION, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
# Define the custom order for the legend
custom_order <- c("OTHER", "ENCRUSTING","RED", "GREEN", "BROWN")
algae_counts$Algal_Type <- factor(algae_counts$Algal_Type, levels = custom_order)
# Plot the stacked bar chart
ggplot(algae_counts, aes(x = as.factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("BROWN" = "brown", "RED" = "red", "GREEN" = "seagreen4", "ENCRUSTING" = "purple", "OTHER" = "gray"),
labels = c("BROWN" = "Brown", "RED" = "Red", "GREEN" = "Green", "ENCRUSTING" = "Encrusting", "OTHER" = "Other")) +
labs(x = "Section", y = "Count", fill = "Algal Type", title = "Algal Cover by Section") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust= 0.5)) +
guides(fill = guide_legend(reverse = TRUE))  # To customize the order of names in the legend
# Save the plot as an image (optional)
ggsave("stacked_bar_plot.png", width = 10, height = 6)
knitr::opts_chunk$set(echo = TRUE)
#Use library to call your installed packages for use
library(data.table)
library(dplyr)
library('ggplot2')
library("indicspecies")
library(kableExtra)
library(knitr)
library(RColorBrewer)
library(tidyr)
library(tidyverse)
library(vegan)
knitr::opts_chunk$set(echo = TRUE)
# make sure you know where you are working, remove the #if you need to make this work
#getwd()
#setwd()
counts<- read.csv("truncated.csv", header= TRUE) #species counts per section
algae<- read.csv("algae.csv", header= TRUE) #algal cover in first and second layer of each quadrat
substrate<- read.csv("substrate.csv", header=TRUE) #substrate percent cover in first and second layer of each quadrat
marine<- read.csv("combinedMarine.csv", header= TRUE)
#Use library to call your installed packages for use
library(data.table)
library(dplyr)
library('ggplot2')
library("indicspecies")
library(kableExtra)
library(knitr)
library(RColorBrewer)
library(tidyr)
library(tidyverse)
library(vegan)
knitr::opts_chunk$set(echo = TRUE)
counts<- read.csv("truncated.csv", header= TRUE) #species counts per section
algae<- read.csv("algae.csv", header= TRUE) #algal cover in first and second layer of each quadrat
substrate<- read.csv("substrate.csv", header=TRUE) #substrate percent cover in first and second layer of each quadrat
marine<- read.csv("combinedMarine.csv", header= TRUE)
counts1 <- counts %>%
gather(key = "Phylum", value = "Count", ANNELIDA:OSTEICHTHYES)
# Sum the counts for each SECTION and Phylum
section_phylum_counts <- counts1 %>%
group_by(SECTION, Phylum) %>%
summarize(Total_Count = sum(Count))
# Plot the stacked bar graph for counts by SECTION with phyla as fill
ggplot(section_phylum_counts, aes(x = SECTION, y = Total_Count, fill = Phylum)) +
geom_bar(stat = "identity") +
labs(x = "SECTION", y = "Count", title = "Counts for each SECTION by Phylum") +
theme_minimal()
# Get unique Phylum values
unique_phyla <- unique(section_phylum_counts$Phylum)
# Generate a color palette with enough colors to match the number of unique Phylum values
n_colors <- length(unique_phyla)
#custom_colors <- brewer.pal(n_colors, "Spectral")
custom_colors <- c("sienna", "red", "yellow", "royalblue", "purple","seagreen", "black", "orange", "lightgrey")
plot_width <- 10
plot_height <- 6
margin_bottom <- 1.5
# Plot the stacked bar graph for counts by SECTION with phyla as fill and custom colors
ggplot(section_phylum_counts, aes(x = SECTION, y = Total_Count, fill = Phylum)) +
=======
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Section",
x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Algal type by zone
plot_zone <- ggplot(data = plot_data_by_zone, aes(x = Algal_Type, y = Count, fill = ZONATION)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Zone",
x = "Algal Type", y = "Count", fill = "Zone") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Arrange the plots side by side using 'gridExtra' package
library(gridExtra)
# Arrange the two plots side by side
grid.arrange(plot_section, plot_zone, ncol = 2)
# Create a new data frame with the relevant columns for visualization
plot_data_by_section <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with("BROWN_"), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type))
plot_data_by_zone <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with("BROWN_"), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type),
ZONATION = factor(ZONATION, levels = c("L", "M", "U")))
# Create two separate plots for each algal type
# 1. Algal type by section
plot_section <- ggplot(data = plot_data_by_section, aes(x = factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Section",
x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Algal type by zone
plot_zone <- ggplot(data = plot_data_by_zone, aes(x = Algal_Type, y = Count, fill = ZONATION)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Zone",
x = "Algal Type", y = "Count", fill = "Zone") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Arrange the plots side by side using 'gridExtra' package
library(gridExtra)
# Arrange the two plots side by side
grid.arrange(plot_section, plot_zone, ncol = 2)
# Create a new data frame with the relevant columns for visualization
plot_data_by_section <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with(c("BROWN_", "RED_", "GREEN_", "ENCRUSTING_", "OTHER_")), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type))
plot_data_by_zone <- algae %>%
gather(key = "Algal_Type", value = "Count", starts_with(c("BROWN_", "RED_", "GREEN_", "ENCRUSTING_", "OTHER_")), factor_key = TRUE) %>%
mutate(Algal_Type = gsub("_FL|_SL", "", Algal_Type),
ZONATION = factor(ZONATION, levels = c("L", "M", "U")))
# Create two separate plots for each algal type
# 1. Algal type by section
plot_section <- ggplot(data = plot_data_by_section, aes(x = factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Section",
x = "Section", y = "Count", fill = "Algal Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Algal type by zone
plot_zone <- ggplot(data = plot_data_by_zone, aes(x = Algal_Type, y = Count, fill = ZONATION)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Algal Type Distribution by Zone",
x = "Algal Type", y = "Count", fill = "Zone") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Arrange the plots side by side using 'gridExtra' package
library(gridExtra)
# Arrange the two plots side by side
grid.arrange(plot_section, plot_zone, ncol = 2)
View(counts2)
View(counts)
# Convert the species count data to a distance matrix
distance_matrix <- vegdist(counts[, 3:13], method = "bray")
# Perform NMDS
nmds_result <- metaMDS(distance_matrix, k = 2)  # k = 2 for 2-dimensional NMDS, you can change it as needed
=======
# we will have to choose zone over section or vice versa so we can clearly see the result. Maybe we adjust the way we manipulate it
# Plot the stacked bar plot with sections on X-axis and species on Y-axis
ggplot(data = section_zone, aes(x = factor(SECTION), y = Sum_Count, fill = Species)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Stacked Bar Plot of Species Counts by Section and Species",
x = "Section", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
>>>>>>> ae8c58d9eb30c0feafaae258fa284bc1a3ddcf79
# Check for missing values in the entire data frame
sum(is.na(counts))
# Check for missing values in specific columns (e.g., the algal count columns)
colSums(is.na(counts[, 3:13]))
# Convert the species count data to a distance matrix
distance_matrix <- vegdist(counts[, 3:13], method = "bray")
# Impute missing values with the mean of non-missing values
distance_matrix[is.na(distance_matrix)] <- mean(distance_matrix, na.rm = TRUE)
# Perform NMDS
nmds_result <- metaMDS(distance_matrix, k = 2)  # k = 2 for 2-dimensional NMDS, you can change it as needed
# Plot NMDS
plot(nmds_result, display = "sites", type = "n")  # Plot without points first
points(nmds_result, display = "sites", pch = 16, col = counts$SECTION)  # Add points with different colors for sections
legend("bottomright", legend = unique(counts$SECTION), col = unique(counts$SECTION), pch = 16, title = "Section")
<<<<<<< HEAD
plot(nmds_result, display = "sites", type = "n")  # Plot without points first
points(nmds_result, display = "sites", pch = 16, col = counts$SECTION)  # Add points with different colors for sections
legend("bottomright", legend = unique(counts$SECTION), col = unique(counts$SECTION), pch = 16, title = "Section")
# Convert the species count data to a distance matrix
distance_matrix <- vegdist(counts[, 3:13], method = "bray")
# Perform PERMANOVA
permanova_result <- adonis(distance_matrix ~ SECTION, data = counts)
=======
>>>>>>> ae8c58d9eb30c0feafaae258fa284bc1a3ddcf79
# Convert the species count data to a distance matrix
distance_matrix <- vegdist(counts[, 3:13], method = "bray")
# Impute missing values with the mean of non-missing values
distance_matrix[is.na(distance_matrix)] <- mean(distance_matrix, na.rm = TRUE)
# Perform PERMANOVA
permanova_result <- adonis(distance_matrix ~ SECTION, data = counts)
# Print PERMANOVA results
print(permanova_result)
<<<<<<< HEAD
# Sum the counts for each species to get the total count per section and zone
section_totals <- algae %>%
group_by(SECTION) %>%
summarise(total_count = sum(BROWN_FL, RED_FL, GREEN_FL, ENCRUSTING_FL, OTHER_FL,
BROWN_SL, RED_SL, GREEN_SL, ENCRUSTING_SL, OTHER_SL))
zone_totals <- algae %>%
group_by(ZONATION) %>%
summarise(total_count = sum(BROWN_FL, RED_FL, GREEN_FL, ENCRUSTING_FL, OTHER_FL,
BROWN_SL, RED_SL, GREEN_SL, ENCRUSTING_SL, OTHER_SL))
# Create a Poisson GLM for section comparison
section_glm <- glm(total_count ~ SECTION, data = section_totals, family = poisson)
# Create a Poisson GLM for zone comparison
zone_glm <- glm(total_count ~ ZONATION, data = zone_totals, family = poisson)
# Perform ANOVA on the Poisson GLM
section_anova <- anova(section_glm)
zone_anova <- anova(zone_glm)
# Print the ANOVA results
print(section_anova)
print(zone_anova)
=======
>>>>>>> ae8c58d9eb30c0feafaae258fa284bc1a3ddcf79
library(stats)
# Combine the columns related to species counts into a single column
species_data <- counts %>%
select(SECTION, ZONATION, starts_with("ANNELIDA"), starts_with("BRYOZOA"), starts_with("TUNICATA"),
starts_with("PORIFERA_DEMOSPONGIAE"), starts_with("CNIDAIRA_ANTHOZOA"),
starts_with("MOLLUSCA"), starts_with("ARTHROPODA_NC"), starts_with("ARTHROPODA_C"),
starts_with("ECHINODERMATA_A"), starts_with("ECHINODERMATA_O"), starts_with("OSTEICHTHYES"))
# Gather the species count data into a long format
species_data_long <- species_data %>%
pivot_longer(cols = starts_with("ANNELIDA"):starts_with("OSTEICHTHYES"),
names_to = "Species", values_to = "Count")
# Calculate the total count of each species for each section and zone
total_counts <- species_data_long %>%
group_by(SECTION, ZONATION, Species) %>%
summarise(Total_Count = sum(Count))
# Create a Poisson GLM for section comparison
section_glm <- glm(Total_Count ~ SECTION, data = total_counts, family = poisson)
# Create a Poisson GLM for zone comparison
zone_glm <- glm(Total_Count ~ ZONATION, data = total_counts, family = poisson)
# Perform ANOVA on the Poisson GLMs
section_anova <- anova(section_glm)
zone_anova <- anova(zone_glm)
# Print the ANOVA results
print(section_anova)
print(zone_anova)
# Perform the ANOVA for section comparison
section_anova <- aov(Total_Count ~ SECTION, data = total_counts)
# Print the ANOVA table with p-values
summary(section_anova)
# Perform the ANOVA for zone comparison
zone_anova <- aov(Total_Count ~ ZONATION, data = total_counts)
# Print the ANOVA table with p-values
summary(zone_anova)
<<<<<<< HEAD
=======
# Sum the counts for each species to get the total count per section and zone
section_totals <- algae %>%
group_by(SECTION) %>%
summarise(total_count = sum(BROWN_FL, RED_FL, GREEN_FL, ENCRUSTING_FL, OTHER_FL,
BROWN_SL, RED_SL, GREEN_SL, ENCRUSTING_SL, OTHER_SL))
zone_totals <- algae %>%
group_by(ZONATION) %>%
summarise(total_count = sum(BROWN_FL, RED_FL, GREEN_FL, ENCRUSTING_FL, OTHER_FL,
BROWN_SL, RED_SL, GREEN_SL, ENCRUSTING_SL, OTHER_SL))
# Create a Poisson GLM for section comparison
section_glm <- glm(total_count ~ SECTION, data = section_totals, family = poisson)
# Create a Poisson GLM for zone comparison
zone_glm <- glm(total_count ~ ZONATION, data = zone_totals, family = poisson)
# Perform ANOVA on the Poisson GLM
section_anova <- anova(section_glm)
zone_anova <- anova(zone_glm)
# Print the ANOVA results
print(section_anova)
print(zone_anova)
>>>>>>> ae8c58d9eb30c0feafaae258fa284bc1a3ddcf79
# Combine the columns related to algae counts into a single column
algae_data <- algae %>%
select(SECTION, ZONATION, starts_with("BROWN_FL"), starts_with("RED_FL"), starts_with("GREEN_FL"),
starts_with("ENCRUSTING_FL"), starts_with("OTHER_FL"),
starts_with("BROWN_SL"), starts_with("RED_SL"), starts_with("GREEN_SL"),
starts_with("ENCRUSTING_SL"), starts_with("OTHER_SL"))
# Gather the algae count data into a long format
algae_data_long <- algae_data %>%
pivot_longer(cols = starts_with("BROWN_FL"):starts_with("OTHER_SL"),
names_to = "Algal_Type", values_to = "Count")
# Calculate the total count of each algal type for each section and zone
total_counts_algae <- algae_data_long %>%
group_by(SECTION, ZONATION, Algal_Type) %>%
summarise(Total_Count = sum(Count))
# Perform the ANOVA for section comparison
section_anova_algae <- aov(Total_Count ~ SECTION, data = total_counts_algae)
# Print the ANOVA table with p-values
summary(section_anova_algae)
# Perform the ANOVA for zone comparison
zone_anova_algae <- aov(Total_Count ~ ZONATION, data = total_counts_algae)
# Print the ANOVA table with p-values
summary(zone_anova_algae)
<<<<<<< HEAD
knitr::opts_chunk$set(echo = TRUE)
# Load required packages
#install.packages("ggplot2")
library(ggplot2)
# Read the data from the CSV file
data <- read.csv("seal.csv")
# Convert the DATE OF OBSERVATION column to Date format
data$DATE_OF_OBSERVATION <- as.Date(data$DATE_OF_OBSERVATION, format = "%m/%d/%Y")
# Load required packages
#install.packages("ggplot2")
library(ggplot2)
# Read the data from the CSV file
data <- read.csv("seal.csv")
# Convert the DATE OF OBSERVATION column to Date format
data$DATE_OF_OBSERVATION <- as.Date(data$DATE_OF_OBSERVATION, format = "%m/%d/%Y")
View(data)
# Read the data from the CSV file
data <- read.csv("seal.csv")
# Convert the DATE OF OBSERVATION column to Date format
data$DATE.OF.OBSERVATION <- as.Date(data$DATE.OF.OBSERVATION, format = "%m/%d/%Y")
# Calculate the total behavior frequency per day
total_behavior_frequency <- aggregate(OCCURENCE ~ DATE.OF.OBSERVATION, data, sum)
# Plot the histogram of behaviors per day
ggplot(data, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE, fill = BEHAVIOUR)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(x = "Date of Observation", y = "Behavior Frequency", title = "Histogram of Behaviors Per Day")
# Plot the histogram of total behavior frequency across all days
ggplot(total_behavior_frequency, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE)) +
geom_bar(stat = "identity", fill = "blue") +
theme_minimal() +
labs(x = "Date of Observation", y = "Total Behavior Frequency", title = "Histogram of Total Behavior Frequency")
# Convert the DATE OF OBSERVATION column to Date format
data$DATE.OF.OBSERVATION <- as.Date(data$DATE.OF.OBSERVATION, format = "%m/%d/%Y")
# Calculate the total behavior frequency per day
total_behavior_frequency <- aggregate(OCCURENCE ~ DATE.OF.OBSERVATION, data, sum)
# Plot the histogram of behaviors per day
ggplot(data, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE, fill = BEHAVIOUR)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(x = "Date of Observation", y = "Behavior Frequency", title = "Histogram of Behaviors Per Day")
# Plot the histogram of total behavior frequency across all days
ggplot(total_behavior_frequency, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE)) +
geom_bar(stat = "identity", fill = "blue") +
theme_minimal() +
labs(x = "Date of Observation", y = "Total Behavior Frequency", title = "Histogram of Total Behavior Frequency")
ggplot(total_behavior_frequency, aes(x = DATE_OF_OBSERVATION, y = OCCURENCE, fill = BEHAVIOUR)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(x = "Date of Observation", y = "Total Behavior Frequency", title = "Stacked Bar Plot of Total Behavior Frequency")
# Calculate the total behavior frequency per day
total_behavior_frequency <- aggregate(OCCURENCE ~ DATE.OF.OBSERVATION, data, sum)
# Plot the stacked bar plot of total behavior frequency across all days
ggplot(total_behavior_frequency, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE, fill = BEHAVIOUR)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(x = "Date of Observation", y = "Total Behavior Frequency", title = "Stacked Bar Plot of Total Behavior Frequency")
# Convert the DATE OF OBSERVATION column to Date format
data$DATE.OF.OBSERVATION <- as.Date(data$DATE.OF.OBSERVATION, format = "%m/%d/%Y")
# Calculate the total behavior frequency per day
total_behavior_frequency <- aggregate(OCCURENCE ~ DATE.OF.OBSERVATION, data, sum)
# Plot the stacked bar plot of total behavior frequency across all days
ggplot(total_behavior_frequency, aes(x = DATE.OF.OBSERVATION, y = OCCURENCE, fill = BEHAVIOUR)) +
>>>>>>> 2a36dfef66ac66cc39b922601f86e93ed2564e0e
geom_bar(stat = "identity") +
scale_fill_manual(values = custom_colors) +  # Set custom colors for the phyla
labs(x = "SECTION", y = "Count") +
ggtitle("Phyla Count by Section") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, face = "bold"),
plot.margin = unit(c(margin_bottom, 0.5, 0.5, 0.5), "cm"),
plot.title = element_text(hjust = 0.5),  # Center the plot title
plot.background = element_rect(fill = "white"),  # Set plot background color
panel.grid = element_blank(),  # Remove grid lines
axis.line = element_line(size = 0.5),  # Customize axis line width
legend.position = "right" ) +
coord_cartesian(ylim = c(0, max(section_phylum_counts$Total_Count) * 1.1))  # Adjust Y-axis limits# Plot the stacked bar graph for counts by SECTION with phyla as fill and custom colors
all_sections <- 1:8
# Plot the stacked bar graph for counts by SECTION with phyla as fill and custom colors
ggplot(section_phylum_counts, aes(x = factor(SECTION, levels = all_sections), y = Total_Count, fill = Phylum)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = custom_colors) +  # Set custom colors for the phyla
labs(x = "SECTION", y = "Count", title = "Phyla Count by Section") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 0, hjust = 1, vjust = 0.5, face = "bold")) +
scale_x_discrete(limits = all_sections)  # Set X-axis labels to include all sections from 1 to 8
# Sum the counts for each ZONATION and Phylum
zonation_phylum_counts <- counts1 %>%
group_by(ZONATION, Phylum) %>%
summarize(Total_Count = sum(Count))
custom_colors <- c("sienna", "red", "yellow", "royalblue", "purple","seagreen", "black", "orange", "lightgrey")
ggplot(zonation_phylum_counts, aes(x = ZONATION, y = Total_Count, fill = Phylum)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = custom_colors) +
labs(x = "Zonation", y = "Phyla Count", title = "Phyla Count across Zonation") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Combine Site and Section to form the X-axis label
marine$Site_Section <- paste(marine$SITE, marine$SECTION, sep = "-")
# Define the custom order of Phylum categories
custom_order <- c("Rhodophyta", "Ochrophyta", "Chlorophyta", "Mollusca", "Cnidaria",  "Arthropoda")
# Match colors to phyla from last graph
custom_colors <- c("indianred4", "salmon2", "mediumseagreen", "green2", "royalblue","red")
# Reorder the Phylum variable based on the custom order
marine$Phylum <- factor(marine$Phylum, levels = custom_order)
# Plot the stacked bar graph
ggplot(marine, aes(x = Site_Section, y = Percent_Cover, fill = Phylum)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = custom_colors) +
labs(title = "Phyla Percent Cover across Site and Section",
x = "Site - Section",
y = "Percent Cover") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(reverse = TRUE))  # Reverse the order of the legend
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(SECTION, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
library(readr)
algae1 <- read_csv("data/algae1.csv")
View(algae1)
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae1 %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(SECTION, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
# Define the custom order for the legend
custom_order <- c("OTHER", "ENCRUSTING","RED", "GREEN", "BROWN")
algae_counts$Algal_Type <- factor(algae_counts$Algal_Type, levels = custom_order)
# Plot the stacked bar chart
ggplot(algae_counts, aes(x = as.factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("BROWN" = "brown", "RED" = "red", "GREEN" = "seagreen4", "ENCRUSTING" = "purple", "OTHER" = "gray"),
labels = c("BROWN" = "Brown", "RED" = "Red", "GREEN" = "Green", "ENCRUSTING" = "Encrusting", "OTHER" = "Other")) +
labs(x = "Section", y = "Count", fill = "Algal Type", title = "Algal Cover by Section") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust= 0.5)) +
guides(fill = guide_legend(reverse = TRUE))  # To customize the order of names in the legend
# Save the plot as an image (optional)
ggsave("stacked_bar_plot.png", width = 10, height = 6)
library(readr)
summer23both <- read_csv("data/summer23both.csv")
View(summer23both)
View(counts)
# Install and load the vegan package
#install.packages("vegan")
library(vegan)
# Assuming 'data' is your abundance or presence-absence matrix
# Calculate dissimilarity matrix
dist_matrix <- vegdist(counts, method = "bray")
#library(vegan)
counts2<- subset(counts, select = -2)
# Calculate dissimilarity matrix
dist_matrix <- vegdist(counts2, method = "bray")
# Perform NMDS analysis
nmds_result <- metaMDS(dist_matrix)
# Plot NMDS results
plot(nmds_result)
#library(vegan)
counts2<- subset(counts, select = -2)
# Calculate dissimilarity matrix
dist_matrix <- vegdist(counts2, method = "bray")
# Perform NMDS analysis
nmds_result <- metaMDS(dist_matrix)
# Create a vector of 8 distinct colors
section_colors <- rainbow(8)
# Plot NMDS results with color-coded sites
ordiplot(nmds_result, display = "Sections", col = Section_colors)
# Plot NMDS results with color-coded sites
ordiplot(nmds_result, display = "Sections", col = section_colors)
# Plot NMDS results with color-coded sites
ordiplot(nmds_result, display = "Section", col = section_colors)
#library(vegan)
counts2<- subset(counts, select = -2)
# Calculate dissimilarity matrix
dist_matrix <- vegdist(counts2, method = "bray")
# Perform NMDS analysis
nmds_result <- metaMDS(dist_matrix)
# Create a vector of 8 distinct colors
section_colors <- rainbow(8)
# Plot NMDS results with color-coded sections
plot(nmds_result, type = "n")  # 'n' stands for 'none' to create an empty plot
# Add points to the plot with color-coded sections
points(nmds_result, col = section_colors)
# Add a legend
legend("topright", legend = 1:8, col = section_colors, pch = 1, cex = 1.2, title = "Sections")
library(readr)
tax <- read_csv("data/tax.csv")
View(tax)
library(readr)
taxcorrected <- read_csv("data/taxcorrected.csv")
View(taxcorrected)
# join summer2023both with taxcorrected to run a second nmds for each site
# load summer & tax data
# Assuming your tables are named abbreviation and name
summertax <- merge(summer23both, taxcorrected, by = species_code, all.x = TRUE)
# join summer2023both with taxcorrected to run a second nmds for each site
# load summer & tax data
# Assuming your tables are named abbreviation and name
summertax <- merge(summer23both, taxcorrected, by = "species_code", all.x = TRUE)
# View the merged table
print(summertax)
counts3 <- counts2 %>%
mutate("Section" = ifelse(your_column == "1", "Yellow", "Section"))
counts3 <- counts2 %>%
mutate("Section" = ifelse("Section" == "1:8", "Yellow", "Section"))
View(counts3)
counts3 <- counts2 %>%
mutate("Site" = ifelse("Section" == "1:8", "Yellow", "Section"))
View(counts3)
counts3 <- counts2 %>%
mutate("Site" = ifelse("Yellow" == "1:8", "Yellow", "Section"))
View(counts3)
View(algae)
# Example using vegan package
permanova_result <- adonis(algae ~ Zonation, algae = Section, method = "bray")
# Example using vegan package
permanova_result <- adonis(algae ~ "Zonation", algae = "Section", method = "bray")
View(algae_counts)
View(counts1)
View(algae1)
#load packages
library(data.table)
library(dplyr)
library('ggplot2')
library("indicspecies")
library(kableExtra)
library(knitr)
library(RColorBrewer)
library(tidyr)
library(tidyverse)
library(vegan)
#load data
read.csv("algaefull.csv")
#pie charts for algae
#clean up the data first
# Convert data types and handle missing values if any
algae <- algaefull %>%
mutate(across(everything(), as.factor)) %>%
replace(is.na(.), 0)  # Replace NA values with 0 (assuming NA means absence)
#load data
algae<- read.csv("algaefull.csv")
#pie charts for algae
#clean up the data first
# Convert data types and handle missing values if any
algae <- algae %>%
mutate(across(everything(), as.factor)) %>%
replace(is.na(.), 0)  # Replace NA values with 0 (assuming NA means absence)
# Summarize data for each SECTION and ZONATION
summary_data <- data %>%
group_by(SECTION, ZONATION) %>%
summarize_all(sum) %>%
gather(key = "ALGAE_TYPE", value = "COUNT", -SECTION, -ZONATION)
View(algae)
#load packages
library(data.table)
library(dplyr)
library('ggplot2')
library("indicspecies")
library(kableExtra)
library(knitr)
library(RColorBrewer)
library(tidyr)
library(tidyverse)
library(vegan)
#load data
algae<- read.csv("algaefull.csv")
algae <- algae %>%
mutate(across(everything(), as.factor)) %>%
replace(is.na(.), 0)  # Replace NA values with 0 (assuming NA means absence)
head(algae)
summary_data <- data %>%
group_by(SECTION, ZONATION) %>%
summarize_all(sum) %>%
gather(key = "ULVA", value = "COUNT", -SECTION, -ZONATION, -ASSIGNED_NUMBER)
# Summarize data for each SECTION and ZONATION
summary_data <- data %>%
group_by(SECTION, ZONATION) %>%
summarize_all(sum) %>%
gather(key = "ULVA", value = "COUNT", -SECTION, -NUMBER, -ASSIGNED_NUMBER, -ZONATION)
# Summarize data for each SECTION and ZONATION
summary_data <- ALGAE %>%
group_by(SECTION, ZONATION) %>%
summarize_all(sum) %>%
gather(key = "ALGAE_TYPE", value = "COUNT", -SECTION, -NUMBER, -ASSIGNED_NUMBER, -ZONATION)
#load packages
library(data.table)
library(dplyr)
library('ggplot2')
library("indicspecies")
library(kableExtra)
library(knitr)
library(RColorBrewer)
library(tidyr)
library(tidyverse)
library(vegan)
#load data
algae<- read.csv("algaefull.csv")
head(algae)
result <- algae %>%
group_by(section) %>%
summarise(across(5:19, sum, na.rm = TRUE))
result <- algae %>%
group_by(SECTION) %>%
summarise(across(5:19, sum, na.rm = TRUE))
View(algae)
df <- algae[1:482, ] %>% select(-number, -assigned_number)
df <- algae[1:482, ] %>% select(-NUMBER, -ASSIGNED_NUMBER)
rockweed_section1_L <- df %>%
filter(section == 1, zonation == 'L') %>%
summarise(rockweed_sum = sum(rockweed, na.rm = TRUE))
df <- algae[1:482, ] %>% select(-NUMBER, -ASSIGNED_NUMBER)
rockweed_section1_L <- df %>%
filter(SECTION == 1, ZONATION == 'L') %>%
summarise(rockweed_sum = sum(ROCKWEED, na.rm = TRUE))
rockweed_section1_L
View(df)
