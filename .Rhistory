plot.background = element_rect(fill = "white"),  # Set plot background color
panel.grid = element_blank(),  # Remove grid lines
axis.line = element_line(size = 0.5),  # Customize axis line width
legend.position = "right" ) +
coord_cartesian(ylim = c(0, max(section_phylum_counts$Total_Count) * 1.1))  # Adjust Y-axis limits# Plot the stacked bar graph for counts by SECTION with phyla as fill and custom colors
all_sections <- 1:8
# Plot the stacked bar graph for counts by SECTION with phyla as fill and custom colors
ggplot(section_phylum_counts, aes(x = factor(SECTION, levels = all_sections), y = Total_Count, fill = Phylum)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = custom_colors) +  # Set custom colors for the phyla
labs(x = "SECTION", y = "Count", title = "Phyla Count by Section") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 0, hjust = 1, vjust = 0.5, face = "bold")) +
scale_x_discrete(limits = all_sections)  # Set X-axis labels to include all sections from 1 to 8
# Sum the counts for each ZONATION and Phylum
zonation_phylum_counts <- counts1 %>%
group_by(ZONATION, Phylum) %>%
summarize(Total_Count = sum(Count))
custom_colors <- c("sienna", "red", "yellow", "royalblue", "purple","seagreen", "black", "orange", "lightgrey")
ggplot(zonation_phylum_counts, aes(x = ZONATION, y = Total_Count, fill = Phylum)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = custom_colors) +
labs(x = "Zonation", y = "Phyla Count", title = "Phyla Count across Zonation") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Combine Site and Section to form the X-axis label
marine$Site_Section <- paste(marine$SITE, marine$SECTION, sep = "-")
# Define the custom order of Phylum categories
custom_order <- c("Rhodophyta", "Ochrophyta", "Chlorophyta", "Mollusca", "Cnidaria",  "Arthropoda")
# Match colors to phyla from last graph
custom_colors <- c("indianred4", "salmon2", "mediumseagreen", "green2", "royalblue","red")
# Reorder the Phylum variable based on the custom order
marine$Phylum <- factor(marine$Phylum, levels = custom_order)
# Plot the stacked bar graph
ggplot(marine, aes(x = Site_Section, y = Percent_Cover, fill = Phylum)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = custom_colors) +
labs(title = "Phyla Percent Cover across Site and Section",
x = "Site - Section",
y = "Percent Cover") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(reverse = TRUE))  # Reverse the order of the legend
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(SECTION, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
library(readr)
algae1 <- read_csv("data/algae1.csv")
View(algae1)
# Assuming you already have the 'algae' dataframe, create a new dataframe with the desired format
algae_counts <- algae1 %>%
pivot_longer(cols = c(BROWN, RED, GREEN, ENCRUSTING, OTHER), names_to = "Algal_Type", values_to = "Presence") %>%
group_by(SECTION, Algal_Type) %>%
summarize(Count = sum(ifelse(Presence == "P", 1, 0)))
# Define the custom order for the legend
custom_order <- c("OTHER", "ENCRUSTING","RED", "GREEN", "BROWN")
algae_counts$Algal_Type <- factor(algae_counts$Algal_Type, levels = custom_order)
# Plot the stacked bar chart
ggplot(algae_counts, aes(x = as.factor(SECTION), y = Count, fill = Algal_Type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("BROWN" = "brown", "RED" = "red", "GREEN" = "seagreen4", "ENCRUSTING" = "purple", "OTHER" = "gray"),
labels = c("BROWN" = "Brown", "RED" = "Red", "GREEN" = "Green", "ENCRUSTING" = "Encrusting", "OTHER" = "Other")) +
labs(x = "Section", y = "Count", fill = "Algal Type", title = "Algal Cover by Section") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust= 0.5)) +
guides(fill = guide_legend(reverse = TRUE))  # To customize the order of names in the legend
# Save the plot as an image (optional)
ggsave("stacked_bar_plot.png", width = 10, height = 6)
library(readr)
summer23both <- read_csv("data/summer23both.csv")
View(summer23both)
View(counts)
# Install and load the vegan package
#install.packages("vegan")
library(vegan)
# Assuming 'data' is your abundance or presence-absence matrix
# Calculate dissimilarity matrix
dist_matrix <- vegdist(counts, method = "bray")
#library(vegan)
counts2<- subset(counts, select = -2)
# Calculate dissimilarity matrix
dist_matrix <- vegdist(counts2, method = "bray")
# Perform NMDS analysis
nmds_result <- metaMDS(dist_matrix)
# Plot NMDS results
plot(nmds_result)
#library(vegan)
counts2<- subset(counts, select = -2)
# Calculate dissimilarity matrix
dist_matrix <- vegdist(counts2, method = "bray")
# Perform NMDS analysis
nmds_result <- metaMDS(dist_matrix)
# Create a vector of 8 distinct colors
section_colors <- rainbow(8)
# Plot NMDS results with color-coded sites
ordiplot(nmds_result, display = "Sections", col = Section_colors)
# Plot NMDS results with color-coded sites
ordiplot(nmds_result, display = "Sections", col = section_colors)
# Plot NMDS results with color-coded sites
ordiplot(nmds_result, display = "Section", col = section_colors)
#library(vegan)
counts2<- subset(counts, select = -2)
# Calculate dissimilarity matrix
dist_matrix <- vegdist(counts2, method = "bray")
# Perform NMDS analysis
nmds_result <- metaMDS(dist_matrix)
# Create a vector of 8 distinct colors
section_colors <- rainbow(8)
# Plot NMDS results with color-coded sections
plot(nmds_result, type = "n")  # 'n' stands for 'none' to create an empty plot
# Add points to the plot with color-coded sections
points(nmds_result, col = section_colors)
# Add a legend
legend("topright", legend = 1:8, col = section_colors, pch = 1, cex = 1.2, title = "Sections")
library(readr)
tax <- read_csv("data/tax.csv")
View(tax)
library(readr)
taxcorrected <- read_csv("data/taxcorrected.csv")
View(taxcorrected)
# join summer2023both with taxcorrected to run a second nmds for each site
# load summer & tax data
# Assuming your tables are named abbreviation and name
summertax <- merge(summer23both, taxcorrected, by = species_code, all.x = TRUE)
# join summer2023both with taxcorrected to run a second nmds for each site
# load summer & tax data
# Assuming your tables are named abbreviation and name
summertax <- merge(summer23both, taxcorrected, by = "species_code", all.x = TRUE)
# View the merged table
print(summertax)
counts3 <- counts2 %>%
mutate("Section" = ifelse(your_column == "1", "Yellow", "Section"))
counts3 <- counts2 %>%
mutate("Section" = ifelse("Section" == "1:8", "Yellow", "Section"))
View(counts3)
counts3 <- counts2 %>%
mutate("Site" = ifelse("Section" == "1:8", "Yellow", "Section"))
View(counts3)
counts3 <- counts2 %>%
mutate("Site" = ifelse("Yellow" == "1:8", "Yellow", "Section"))
View(counts3)
View(algae)
# Example using vegan package
permanova_result <- adonis(algae ~ Zonation, algae = Section, method = "bray")
# Example using vegan package
permanova_result <- adonis(algae ~ "Zonation", algae = "Section", method = "bray")
View(algae_counts)
View(counts1)
View(algae1)
#load packages
library(data.table)
library(dplyr)
library('ggplot2')
library("indicspecies")
library(kableExtra)
library(knitr)
library(RColorBrewer)
library(tidyr)
library(tidyverse)
library(vegan)
#load data
read.csv("algaefull.csv")
#pie charts for algae
#clean up the data first
# Convert data types and handle missing values if any
algae <- algaefull %>%
mutate(across(everything(), as.factor)) %>%
replace(is.na(.), 0)  # Replace NA values with 0 (assuming NA means absence)
#load data
algae<- read.csv("algaefull.csv")
#pie charts for algae
#clean up the data first
# Convert data types and handle missing values if any
algae <- algae %>%
mutate(across(everything(), as.factor)) %>%
replace(is.na(.), 0)  # Replace NA values with 0 (assuming NA means absence)
# Summarize data for each SECTION and ZONATION
summary_data <- data %>%
group_by(SECTION, ZONATION) %>%
summarize_all(sum) %>%
gather(key = "ALGAE_TYPE", value = "COUNT", -SECTION, -ZONATION)
View(algae)
#load packages
library(data.table)
library(dplyr)
library('ggplot2')
library("indicspecies")
library(kableExtra)
library(knitr)
library(RColorBrewer)
library(tidyr)
library(tidyverse)
library(vegan)
#load data
algae<- read.csv("algaefull.csv")
algae <- algae %>%
mutate(across(everything(), as.factor)) %>%
replace(is.na(.), 0)  # Replace NA values with 0 (assuming NA means absence)
head(algae)
summary_data <- data %>%
group_by(SECTION, ZONATION) %>%
summarize_all(sum) %>%
gather(key = "ULVA", value = "COUNT", -SECTION, -ZONATION, -ASSIGNED_NUMBER)
# Summarize data for each SECTION and ZONATION
summary_data <- data %>%
group_by(SECTION, ZONATION) %>%
summarize_all(sum) %>%
gather(key = "ULVA", value = "COUNT", -SECTION, -NUMBER, -ASSIGNED_NUMBER, -ZONATION)
# Summarize data for each SECTION and ZONATION
summary_data <- ALGAE %>%
group_by(SECTION, ZONATION) %>%
summarize_all(sum) %>%
gather(key = "ALGAE_TYPE", value = "COUNT", -SECTION, -NUMBER, -ASSIGNED_NUMBER, -ZONATION)
#load packages
library(data.table)
library(dplyr)
library('ggplot2')
library("indicspecies")
library(kableExtra)
library(knitr)
library(RColorBrewer)
library(tidyr)
library(tidyverse)
library(vegan)
#load data
algae<- read.csv("algaefull.csv")
head(algae)
result <- algae %>%
group_by(section) %>%
summarise(across(5:19, sum, na.rm = TRUE))
result <- algae %>%
group_by(SECTION) %>%
summarise(across(5:19, sum, na.rm = TRUE))
View(algae)
df <- algae[1:482, ] %>% select(-number, -assigned_number)
df <- algae[1:482, ] %>% select(-NUMBER, -ASSIGNED_NUMBER)
rockweed_section1_L <- df %>%
filter(section == 1, zonation == 'L') %>%
summarise(rockweed_sum = sum(rockweed, na.rm = TRUE))
df <- algae[1:482, ] %>% select(-NUMBER, -ASSIGNED_NUMBER)
rockweed_section1_L <- df %>%
filter(SECTION == 1, ZONATION == 'L') %>%
summarise(rockweed_sum = sum(ROCKWEED, na.rm = TRUE))
rockweed_section1_L
View(df)
#get decontam installed if you haven't
install.packages(devtools)
library(devtools)
devtools::install_github("benjjneb/decontam")
#get decontam installed if you haven't
install.packages(devtools)
library(devtools)
library(decontam)
devtools::install_github("benjjneb/decontam")
<<<<<<< HEAD
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("decontam")
getwd()
library(dbplyr)
library(ggplot2)
tax_table18S <- read.csv("/home/shared/8TB_HDD_02/cnmntgna/GitHub/YellowIsland2023/data/Anacapa_Results/18S_taxonomy_tables/18S_ASV_taxonomy_detailed.txt", header= TRUE)
View(tax_table18S)
library(dbplyr)
library(ggplot2)
tax_table18S <- read.csv("/home/shared/8TB_HDD_02/cnmntgna/GitHub/YellowIsland2023/data/Anacapa_Results/18S_taxonomy_tables/Summary_by_percent_confidence/90/18S_ASV_sum_by_taxonomy_90.txt", header= TRUE)
View(tax_table18S)
head(tax_table18S)
summary(tax_table18S)
# Example: Summarize counts for each taxon
summarized_table <- tax_table18S %>%
group_by(Taxon) %>%
summarise(total_counts = sum(Counts))
# Example: Summarize counts for each taxon
summarized_18S <- tax_table18S %>%
group_by(Taxon) %>%
summarize(total_counts = sum(Counts))
library(dplyr)
# Example: Summarize counts for each taxon
summarized_18S <- tax_table18S %>%
group_by(Taxon) %>%
summarize(total_counts = sum(Counts))
View(tax_table18S)
tax_table18S <- read.csv("/home/shared/8TB_HDD_02/cnmntgna/GitHub/YellowIsland2023/data/Anacapa_Results/18S_taxonomy_tables/Summary_by_percent_confidence/90/18S_ASV_sum_by_taxonomy_90.txt", header= TRUE, sep = "\t")
head(tax_table18S)
summary(tax_table18S)
library(phyloseq)
library(ranacapa)
library(devtools)
library(vegan)
install.packages(phyloseq)
install.packages("phyloseq")
library(phyloseq)
source('http://bioconductor.org/biocLite.R')
install.packages("ranacapa")
# Extract the rownames of the matrix above- this has the full taxonomic path.
# Split the taxonomic path on semicolons, and turn the resulting matrix into
# a phyloseq tax_table object
taxon_names <- reshape2::colsplit(rownames(tax_table18S), ";",
names = c("Domain","Phylum","Class","Order","Family","Genus","Species")) %>%
as.matrix
rownames(taxon_names) <- rownames(tax_table18S)
tax_physeq <- phyloseq::tax_table(taxon_names)
source("https://raw.githubusercontent.com/joey711/phyloseq/master/inst/scripts/installer.R",
local = TRUE)
library(phyloseq)
View(install_phyloseq)
devtools::install_github("joey711/phyloseq")
View(install_phyloseq)
View(taxon_names)
install_github("joey711/phyloseq")
# Convert the matrix into a phyloseq otu_table object, with taxa as the rows
ana_taxon_table_physeq <- phyloseq::otu_table(tax_table18S, taxa_are_rows = TRUE)
install.packages(""phyloseq"")
install.packages(""phyloseq"")
install.packages("phyloseqGraphTest")
install.packages("vctrs")
install.packages("vctrs")
=======
#read in files
18S_30<-read.csv("~/Documents/YellowIsland2023/data/Tronko_Results/Yellow_Sep5_q35_18S_Max5.txt", header=TRUE, sep="\t")
devtools::install_github("joey711/phyloseq")
>>>>>>> b667d266c990b98d3d94ac7a1ecb6c62064c89a9
knitr::opts_chunk$set(echo = TRUE)
library(phyloseq)
library("phyloseq")
BiocManager::install("phyloseq")
library("phyloseq")
library("dada2")
BiocManager::install("dada2", version = "3.11")
BiocManager::install(version = "3.18")
knitr::opts_chunk$set(echo = TRUE)
BiocManager::install("dada2", version = "3.11")
install.packages("BiocManager")
BiocManager::install(version = "3.18")
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.11")
library(BiocManager)
knitr::opts_chunk$set(echo = TRUE)
BiocManager::install("dada2", version = "3.11")
BiocManager::version()
BiocManager::install(version = "3.19")
BiocManager::install(version = "3.18")
options(repos = BiocManager::repositories())
getOption("repos")
options(repos = c(
CRAN = "https://cran.rstudio.com/",
BioCsoft = "https://bioconductor.org/packages/3.18/bioc",
BioCann = "https://bioconductor.org/packages/3.18/data/annotation",
BioCexp = "https://bioconductor.org/packages/3.18/data/experiment",
BioCworkflows = "https://bioconductor.org/packages/3.18/workflows"
))
BiocManager::version()
BiocManager::install("dada2", version = "3.11")
library("devtools")
devtools::install_github("benjjneb/dada2", ref="v1.16") # change the ref argument to get other versions
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.9")
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.9")
install.packages("~/github/dada2",
repos = NULL,
type = "source",
dependencies = c("Depends", "Suggests","Imports"))
## try http:// if https:// URLs are not supported
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("dada2")
packageVersion("dada2")
update("dada2")
library("phyloseq")
library("dada2")
help(package="dada2")
BiocManager::install("dada2", version= "3.11")
BiocManager::install("dada2", version= "3.18")
packageVersion("dada2")
library("phyloseq")
library("dada2")
getwd()
getwd()
path <- "/Users/cmantegna/Desktop/yisequences"
fnFs <- sort(list.files(path, pattern = "_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq", full.names = TRUE))
getwd()
path <- "/Users/cmantegna/Desktop/yisequences"
fnFs <- sort(list.files(path, pattern = "_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq.gz", full.names = TRUE))
getwd()
path <- "/Users/cmantegna/Desktop/yisequences"
fnFs <- sort(list.files(path, pattern = "Yell_July18_Site1s_S112_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "Yell_July18_Site1s_S112_R2.fastq.gz", full.names = TRUE))
path <- "/Users/cmantegna/Desktop/yisequences"
fnFs <- sort(list.files(path, pattern = "_R1_001.fastq.gz", full.names = TRUE))
path <- "/Users/cmantegna/Desktop/yisequences/"
fnFs <- sort(list.files(path, pattern = "_R1_001.fastq.gz", full.names = TRUE))
path <- "/Users/cmantegna/Desktop/ysequences"
fnFs <- sort(list.files(path, pattern = "_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2_002.fastq.gz", full.names = TRUE))
getwd()
path <- "/Users/cmantegna/Desktop/ysequences"
fnFs <- sort(list.files(path, pattern = "_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2_002.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2_001.fastq.gz", full.names = TRUE))
filtFs <- file.path(path, "filtered", basename(fnFs))
filtRs <- file.path(path, "filtered", basename(fnRs))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
# get sample names for each by removing the ending
sampleNamesFs <- gsub("_R1_001.fastq.gz", "", basename(fnFs))
sampleNamesRs <- gsub("_R2_001.fastq.gz", "", basename(fnRs))
# find the missing one
missingReverse <- setdiff(sampleNamesFs, sampleNamesRs)
# result
print(missingReverse)
getwd()
path <- "/Users/cmantegna/Desktop/ysequences"
fnFs <- sort(list.files(path, pattern = "_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2_001.fastq.gz", full.names = TRUE))
knitr::opts_chunk$set(echo = TRUE)
library("phyloseq")
library("dada2")
getwd()
path <- "/Users/cmantegna/Desktop/ysequences"
fnFs <- sort(list.files(path, pattern = "_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2_001.fastq.gz", full.names = TRUE))
filtFs <- file.path(path, "filtered", basename(fnFs))
filtRs <- file.path(path, "filtered", basename(fnRs))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(3,5), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE, verbose= TRUE)
View(out)
errF <- learnErrors(filtFs, multithread=TRUE)
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs,
maxN=0, maxEE=c(3,5), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE, verbose= TRUE)
View(out)
errF <- learnErrors(filtFs, multithread=TRUE)
print(out)
nonEmptySamples <- out[,2] > 0
nonEmptySamples <- out[,2] > 0
fnFs_filtered <- filtFs[nonEmptySamples]
fnRs_filtered <- filtRs[nonEmptySamples]
errF <- learnErrors(filtFs_filtered, multithread=TRUE)
errF <- learnErrors(fnFs_filtered, multithread=TRUE)
errR <- learnErrors(fnRs_filtered, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
derepFs <- derepFastq(fnFs_filtered)
derepRs <- derepFastq(fnRs_filtered)
derepRs <- derepFastq(fnRs_filtered)
gc()
plotErrors(errF, nominalQ=TRUE)
# 5 sequence pairs that returned 0: 1aa - 130, 1x - 119, 5d - 90, 5dd - 135, 5gg - 138
# pairs well below other sequences: 5J - 107 (70, 59), 5w - 128 (13, 13)
print(out)
# write to table
write.csv(out,"/Users/cmantegna/Documents/YellowIsland2023/filterOutput.csv", row.names = FALSE)
system("vm_stat")
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
write.csv(dadaFs,"/Users/cmantegna/Documents/YellowIsland2023/inferredFasv.csv", row.names = FALSE)
write.csv(dadaFs,"/Users/cmantegna/Documents/YellowIsland2023/inferredFasv.csv")
derepRs <- derepFastq(fnRs_filtered)
derepRs <- vector("list", length(fnRs_filtered))
for (i in seq_along(fnRs_filtered)) {
derepRs[[i]] <- derepFastq(fnRs_filtered[[i]])
}
saveRDS(dadaFs, "dadaFs.rds")
saveRDS(derepFs, "derepFs.rds")
saveRDS(errF, "errF.rds")
saveRDS(filtFs, "dadaFs.rds")
saveRDS(fnFs, "dadaFs.rds")
saveRDS(fnFs_filtered, "dadaFs.rds")
saveRDS(dadaFs, "dadaFs.rds")
saveRDS(derepFs, "derepFs.rds")
saveRDS(errF, "errF.rds")
saveRDS(filtFs, "filtFs.rds")
saveRDS(fnFs, "fnFs.rds")
saveRDS(fnFs_filtered, "fnFs_filtered.rds")
rm(dadaFs)
rm(derepFs)
rm(errF)
rm(filtFs)
rm(fnFs)
rm(fnFs_filtered)
gc()
gc()
knitr::opts_chunk$set(echo = TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
derepRs <- derepFastq(fnRs_filtered)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
dadaFs <- readRDS("dadaFs.rds")
derepFs<- readRDS("derepFs.rds")
# save- reverse
saveRDS(dadaRs, "dadaRs.rds")
saveRDS(derepRs, "derepRs.rds")
saveRDS(errR, "errR.rds")
saveRDS(filtRs, "filtRs.rds")
saveRDS(fnRs, "fnRs.rds")
saveRDS(fnRs_filtered, "fnRs_filtered.rds")
derepFs<- readRDS("derepFs.rds")
gc()
